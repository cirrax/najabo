#!/usr/bin/perl

# najabo - Nagios Jabber Bot
#
# Authors:
#   Thomas Liske <thomas@fiasko-nw.net>
#
# Copyright Holder:
#   2011 (C) Thomas Liske <thomas@fiasko-nw.net>
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

use Config;
use File::Basename;
use Getopt::Std;
use Linux::Inotify2;
use Log::Dispatch;
use Log::Dispatch::Screen;
use Log::Dispatch::Syslog;
use Log::Dispatch::File;
use POSIX qw(strftime);
use Proc::Daemon;
use Proc::PID::File;
use Net::XMPP;
use Nagios::StatusLog;

use strict;
use warnings;

$0 = 'najabod';

use constant {
    NAJABOD_VERSION => '0.4.trb1',

    XML_IQ_VERSION =>
"<query xmlns='jabber:iq:version'>
    <name>najabod</name>
    <version>%NAJVER%</version>
    <os>nagios %NAGVER%($Config{osname})</os>
</query>",

    XML_IQ_NOVCARD =>
"<vCard xmlns='vcard-temp'/>",

    XML_IQ_DISCO =>
"<query xmlns='http://jabber.org/protocol/disco#info'>
    <feature var='jabber:iq:last'/>
    <feature var='jabber:iq:version'/>
    <feature var='urn:xmpp:ping'/>
    <feature var='urn:xmpp:time'/>
    <feature var='vcard-temp'/>
</query>",

    XML_IQ_NOTIMPL =>
"<error type='cancel'>
    <feature-not-implemented xmlns='urn:ietf:params:xml:ns:xmpp-stanzas'/>
</error>",
};

my $logfmt = sub { my %p = @_; chomp($p{'message'}); return ("[$p{level}] $p{message}\n"); };
my $logffile = sub { my %p = @_;  return (scalar localtime())." [$$] $p{message}"; };
my $logger = Log::Dispatch->new(callbacks => $logfmt);

my $daemonize;
END {
    $logger->notice('terminated') if(defined($logger) && !defined($daemonize));
}

$logger->add(
    Log::Dispatch::Screen->new(
	name => 'console',
	min_level => 'notice',
    )
);

sub mydie($) {
    $logger->critical(shift);
    exit 1;
}

our $opt_c = '/etc/najabo/najabo.conf';
our $opt_f;
getopts('fc:');
mydie("Could not read config file '$opt_c'.") unless(-r $opt_c);
$logger->info("config file: '$opt_c'");

my %xmpp_conf;
my %auth_conf;
my %nagios_conf;
my %alerts_conf;
my %najabo_conf;
my %najabo_acls;
my %najabo_cmds = (
    lh => {
	role => 'user',
	preq => [],
	popt => [],
	descr => 'list hosts',
	sub => \&SendListHosts,
    },
    hd => {
	role => 'user',
	preq => ['host'],
	popt => [],
	descr => 'host details',
	sub => \&SendHostDetails,
    },

    ls => {
	role => 'user',
	preq => [],
	popt => ['host'],
	descr => 'list services',
	sub => \&SendListServices,
    },
    sd => {
	role => 'user',
	preq => ['host/service'],
	popt => [],
	descr => 'service details',
	sub => \&SendServiceDetails,
    },

    lp => {
	role => 'user',
	preq => [],
	popt => [],
	descr => 'list problems',
	sub => \&SendProblems,
    },
    ld => {
	role => 'user',
	preq => [],
	popt => ['host[/service]'],
	descr => 'list downtimes',
    },

    ack => {
	role => 'admin',
	preq => ['host[/service]', 'comment'],
	popt => [],
	descr => 'acknowledge problem',
	sub => \&AckProblem,
    },

    dt => {
	role => 'admin',
	preq => ['host[/service]', 'start', 'end', 'duration', 'comment'],
	popt => [],
	descr => 'schedule downtime',
	sub => \&ScheduleDT,
    },

    help => {
	role => 'user',
	preq => [],
	popt => [],
	descr => 'show command list',
	sub => \&SendHelp,
    },

);
eval `cat "$opt_c"`;

# enable log to file
if(exists($najabo_conf{'logfile'})) {
    $logger->add(
	Log::Dispatch::File->new(
	    name => 'logfile',
	    min_level => 'info',
	    filename => $najabo_conf{'logfile'},
	    close_after_write => '1',
	    callbacks => $logffile,
	)
    );
}
# fallback to syslog
else {
    $logger->add(
	Log::Dispatch::Syslog->new(
	    name => 'syslog',
	    min_level => 'info',
	    ident => 'najabod',
	    logopt => 'pid',
	    facility => 'daemon',
	)
    );
}

$logger->info('najabod '.NAJABOD_VERSION);

my $conn;
my $last;


# send vCard IQ
sub SendVCard(%) {
    my $iq = new Net::XMPP::IQ();
    $iq->SetIQ(@_);

    if (exists($najabo_conf{'vcard'}) &&
        defined($najabo_conf{'vcard'}) &&
        (-r $najabo_conf{'vcard'}) &&
        open(FILEREAD, '<', $najabo_conf{'vcard'})) {

        $iq->InsertRawXML(<FILEREAD>);
        close(FILEREAD);
    }
    else {
        $iq->InsertRawXML(XML_IQ_NOVCARD);
    }

    $conn->Send($iq);
}


# setup Nagios::StatusLog stuff
$logger->info("nagios status log: $nagios_conf{Filename}");
$logger->info("nagios version: $nagios_conf{Version}");

my $log;
eval { $log = Nagios::StatusLog->new(%nagios_conf); };
mydie "Failed to initialize Nagios::StatusLog: $@" if($@);

unless($opt_f) {
    # daemonize
    $daemonize = 1;
    eval { Proc::Daemon::Init() };
    $daemonize = undef;
    mydie "Unable to fork daemon: $@" if($@);

    # check if we are alone
    eval {
	die "Daemon is already running or PID file is stale!" if(Proc::PID::File->running(verify => 1, dir => $najabo_conf{'rundir'}));
    };
    mydie "Failed to setup PID file: $@" if($@);

    # detach log to console
    $logger->notice('Could not remove console dispatcher!') unless($logger->remove('console'));
}

# setup inotify
my $inotify = new Linux::Inotify2 or mydie "Unable to create new inotify object: $!";
$inotify->blocking(0);

# add inotify watches
my $watch_status = $inotify->watch(dirname($nagios_conf{'Filename'}), IN_MOVED_TO, sub {
    my $e = shift;
    ParseStatus() if($e->IN_MOVED_TO && ($e->fullname eq $nagios_conf{'Filename'}));
}) or mydie "Could not setup inotify watch: $!";

my $nagios_running = 1;
my $watch_pid = $inotify->watch(dirname($nagios_conf{'PIDFilename'}), IN_CREATE | IN_CLOSE_WRITE, sub {
    my $e = shift;
    $nagios_running = 1 if($e->IN_CREATE);

    if($e->IN_CLOSE_WRITE) {
	$nagios_running = 0;
	ParseStatus();
    }
}) or mydie "Could not setup inotify watch: $!";

my $watch_alert = $inotify->watch($alerts_conf{'Directory'}, IN_MODIFY, sub {
    &SendAlerts;
}) or mydie "Could not setup inotify watch: $!";


my $presence_status = 'Initializing...';
my $presence_show = 'dnd';
while(1) {
    $conn = new Net::XMPP::Client;

    # register callbacks
    $conn->SetCallBacks(message=>\&InMessage, iq=>\&InIQ);

    # try to connect
    unless($conn->Connect(%xmpp_conf)) {
        $logger->warning("Could not connect to XMPP server ($!), sleeping 30 seconds!");
        sleep(30);
        next;
    }
    $logger->info('XMPP server connected');

    # try to auth
    my @result = $conn->AuthSend(%auth_conf);
    unless($result[0] eq 'ok') {
        $logger->warning("Auth failed ($result[1]), sleeping 60 seconds!");
        sleep(60);
        next;
    }
    $logger->info('XMPP auth ok');

    $conn->PresenceSend(
	status => $presence_status,
	show => $presence_show,
    );
    SendVCard(type => 'set');

    # wait for XMPP messages and nagios status updates
    while(defined($conn->Process(3))) {
	$inotify->poll;
    }

    $presence_status = 'XMPP connection broken...';
    $presence_show = 'dnd';

    $logger->warning('XMPP connection broken, sleeping 30 seconds!');
    sleep(30);
}

sub SendAlerts {

    opendir(DIR, $alerts_conf{'Directory'});
    my @files = readdir(DIR);
    closedir DIR;
    foreach (@files) {
       if (! /^\..*/) {
         my $file = $alerts_conf{'Directory'} . '/' . $_;
         open(FILE, $file);
         my $line= <FILE>;
         chomp($line);
         (my $receip, my $message) =  $line =~ /^([^ ]*)[[:blank:]](.*)$/;
         close(FILE);

         $conn->MessageSend(to=>$receip,
                      subject=>"Icinga alert",
                      body=>"$message");
         # TODO: error handling for sending message would be nice ! 
         unlink $file or $logger->warning("Could not unlink $file: $!");
       }
    }
    
}

sub SortStates {
    my %o = (
        'DOWN' => 0,
        'CRITICAL' => 1,
        'WARNING' => 2,
        'UNREACHABLE' => 3,
        'UNKNOWN' => 4,
        'ACKNOWLEDGED' => 5,
        'SCHEDULED' => 6,
        'DISABLED' => 7,
        'OK' => 8,
    );

    return $a cmp $b unless(exists($o{$a}) && exists($o{$b}));
    return $o{$a} <=> $o{$b};
 }

sub GetFlags($) {
    my $p = shift;

    my @flags;

    push(@flags, 'F') if($p->is_flapping);

    return @flags;
}

sub ParseStatus {
    my $status;
    my $show;

    unless($nagios_running) {
	$status = 'Nagios is not running!';
	$show = 'dnd';
    }
    else {
	eval { $log->update(); };
	if($@) {
	    $logger->warning("unable to parse status file: $@");

	    $status = 'Failed to parse nagios status file!';
	    $show = 'dnd';
	}
    }

    # change presence and return if there was an general error
    if(defined($status)) {
	if(($presence_status ne $status) ||
	   ($presence_show ne $show)) {

	    $presence_status = $status;
	    $presence_show = $show;


	    $conn->PresenceSend(
		status => $presence_status,
		show => $presence_show,
	    );
	}

	return;
    }

    my %states;
    foreach my $host ($log->list_hosts) {
        my $obj = $log->host($host);

        my $status = $obj->status;
        if(scalar grep {/^$status$/i} qw(UP OK WARNING CRITICAL)) {
            foreach my $service ($log->list_services_on_host($host)) {
                my $srv = $log->service($host, $service);

                if(defined($srv->status)) {
                    my $status = $srv->status;
                    my @flags = GetFlags($srv);

                    if(!$srv->checks_enabled && !$srv->active_checks_enabled && !$srv->passive_checks_enabled) {
                        $status = 'DISABLED';
                        push(@flags, substr($srv->status, 0, 1));
                    }
                    elsif($srv->scheduled_downtime_depth) {
                        $status = 'SCHEDULED';
                        push(@flags, substr($srv->status, 0, 1));
                    }
                    elsif($srv->problem_has_been_acknowledged) {
                        $status = 'ACKNOWLEDGED';
                        push(@flags, substr($srv->status, 0, 1));
                    }

                    my $line = $obj->host_name;
                    $line .= "/$service";
                    $line .= ' ['.join('', @flags).']' if($#flags > -1);
                    $line .= ': '.$srv->plugin_output if($srv->plugin_output && $srv->status ne 'PENDING');

                    push(@{$states{$status}}, $line);
                }
            }
        }
        else {
            my $status = $obj->status;
            my @flags = GetFlags($obj);

            if(!$obj->checks_enabled && !$obj->active_checks_enabled && !$obj->passive_checks_enabled) {
                $status = 'DISABLED';
                push(@flags, substr($obj->status, 0, 1));
            }
            elsif($obj->scheduled_downtime_depth) {
                $status = 'SCHEDULED';
                push(@flags, substr($obj->status, 0, 1));
            }
            elsif($obj->problem_has_been_acknowledged) {
                $status = 'ACKNOWLEDGED';
                push(@flags, substr($obj->status, 0, 1));
            }

            my $line = $obj->host_name;
            $line .= ' ['.join('', @flags).']' if($#flags > -1);
            $line .= ': '.$obj->plugin_output if($obj->plugin_output && $obj->status ne 'PENDING');

            push(@{$states{$status}}, $line);
        }
    }

    my @states;
    my @details;
    foreach my $status (sort SortStates keys %states) {
        my $t = $status;
        $t =~ s/^(.{4}).+/$1/;

        push(@states, ($#{$states{$status}} + 1).' '.$t);
        push(@details, $status) unless(scalar grep {/^$status$/i} @{$najabo_conf{'filter_states'}});
    }

    $status = join(', ', @states);
    $status .= "\n" unless($#details == -1);
    foreach my $detail (@details) {
        $status .= "\n$detail:\n ".join("\n ", sort @{$states{$detail}})."\n";
    }

    # map nagios status
    $show = 'chat';
    if(exists($states{'DOWN'}) || exists($states{'CRITICAL'})) {
        $show = 'xa';
    }
    elsif(exists($states{'WARNING'})) {
        $show = 'away';
    }

    # only update if something has changed
    if(($presence_status ne $status) ||
       ($presence_show ne $show)) {

	$presence_status = $status;
	$presence_show = $show;

	$conn->PresenceSend(
	    status => $presence_status,
	    show => $presence_show,
	);
    }
}

sub SendListHosts($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $l="Host list:\n";
    foreach my $host ($log->list_hosts) {
         my $obj = $log->host($host);
         $l= $l . "\n|" . $obj->status . '| ' . $host;
    }
    $conn->Send($message->Reply( body => "$l\n",));
}

sub SendHostDetails($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $host = shift(@{$params});
    my $ohost = FindHost($message, 1, $host);
    return unless(defined($ohost));

    my $details = '';

    foreach my $key (sort keys %{$ohost}) {
      if (not ($key=~/^__/)) {
	$details .= "\n\t$key: $ohost->{$key}";
      }
    }

    my $obj = $log->host($host);
    $conn->Send($message->Reply(
	body => "Host details:\n$host |" . $obj->status . "|:$details\n",
    ));
}

sub SendListServices($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my @params = $log->list_hosts();
    if(@{$params} > 0) {
	foreach my $host (@{$params}) {
	    return unless(FindHost($message, 1, $host));
	}
	@params = @{$params};
    }

    my $l = '';
    foreach my $h (sort @params) {
        my $obj = $log->host($h);
	$l .= "\n$h |" . $obj->status . "|:\n";

	foreach my $s (sort $log->list_services_on_host($h)) {
            my $obj=$log->service($h, $s);
	    $l .= "\t |" . $obj->status . "| $s\n";
	}
    }

    if ($l ne '') { $conn->Send($message->Reply( body => "$l",)); }
    else { $conn->Send($message->Reply( body => "no services found (did you set a hostname ?)",)); }
}

sub SendServiceDetails($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $hs = shift(@{$params});
    my ($ohost, $oservice) = FindHostService($message, 1, $hs);
    return unless(defined($ohost) && defined($oservice));

    my $details = '';

    foreach my $key (sort keys %{$oservice}) {
      if (not ($key=~/^__/)) {
	$details .= "\n\t$key: $oservice->{$key}";
      }
    }

    $conn->Send($message->Reply(
	body => "Service details:\n $hs: $details\n",
    ));
}

sub SendProblems($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my @params = $log->list_hosts();

    my $l = '';
    foreach my $h (sort @params) {
        my $obj = $log->host($h);
        my $hl = "\n$h |" . $obj->status . "|:\n";
        my $sl = '';

        foreach my $s (sort $log->list_services_on_host($h)) {
            my $sobj=$log->service($h, $s);
            if ($sobj->status ne 'OK') {
              my $srv = $log->service($h, $s);
              $sl .= "\t |" . $sobj->status . "| $s: " . $srv->{'plugin_output'} . "\n";
            }
        }
        if ($sl ne '' || $obj->status ne 'OK' ) { $l .= $hl . $sl }
        
    }

    if ($l ne '') { $conn->Send($message->Reply( body => "Problems found:\n $l",)); }
    else { $conn->Send($message->Reply( body => "No Problems found",)); }

}

sub RunNagiosCmd(@) {
    my $message = shift;
    my $replyerror = shift;

    unless(exists($nagios_conf{'CMDPipe'})) {
	$conn->Send($message->Reply(
	    body => "Nagios CMD named pipe is not configured.",
	    errorcode => 503,
	    error => 'Service Unavailable',
	    type => 'error',
	)) if($replyerror);

	return 0;
    }

    unless(-p $nagios_conf{'CMDPipe'}) {
	$conn->Send($message->Reply(
	    body => "Nagios CMD named pipe does not exists or is not a pipe: $nagios_conf{CMDPipe}",
	    errorcode => 503,
	    error => 'Service Unavailable',
	    type => 'error',
	)) if($replyerror);

	return 0;
    }

    unless(-w $nagios_conf{'CMDPipe'}) {
	$conn->Send($message->Reply(
	    body => "Permission denied writing to CMD named pipe $nagios_conf{CMDPipe}",
	    errorcode => 500,
	    error => 'Internal Server Error',
	    type => 'error',
	)) if($replyerror);

	return 0;
    }

    unless(open(HCMD, '>', $nagios_conf{'CMDPipe'})) {
	$logger->notice("Cannot open CMD named pipe $nagios_conf{CMDPipe}: $!");

	$conn->Send($message->Reply(
	    body => "Failed opening CMD named pipe $nagios_conf{CMDPipe}: $!",
	    errorcode => 500,
	    error => 'Internal Server Error',
	    type => 'error',
	)) if($replyerror);

	return 0;
    }

    print HCMD '['.localtime().'] '.join(';', @_)."\n";
    close(HCMD);

    return 1;
}

sub FindHost($$$) {
    my $message = shift;
    my $replyerror = shift;
    my $host = shift;

    my $ohost;
    eval { $ohost = $log->host($host); };
    unless(!$@ && defined($ohost)) {
	$conn->Send($message->Reply(
	    body => "Unkown host $host."
	)) if($replyerror);

	return undef;
    };

    return $ohost;
}

sub FindHostService($$$) {
    my $message = shift;
    my $replyerror = shift;
    my $hs = shift;

    unless($hs =~ /^([^\/]+)(\/([^\/]+))?$/) {
	$conn->Send($message->Reply( body => "Host/service pattern is invalid.")) if($replyerror);
	return (undef, undef);
    };

    my $host = $1;
    my $service = $3;

    my $ohost = FindHost($message, $replyerror, $host);
    return unless(defined($ohost));

    my $oservice;
    if(defined($2)) {
	eval { $oservice = $log->service($host, $service); };
	unless(!$@ && defined($oservice)) {
	    $conn->Send($message->Reply(
		body => "Unkown service $service on host $host.",
		errorcode => 404,
		error => 'Not Found',
		type => 'error',
	    )) if($replyerror);

	    return (undef, undef);
	}
    }

    return ($ohost, $oservice);
}

sub AckProblem($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $hs = shift(@{$params});
    my($ohost, $oservice) = FindHostService($message, 1, $hs);

    return unless(defined($ohost));

    my $ret = 0;

    if(!defined($oservice)) {
	$ret = RunNagiosCmd(
	$message, 1, 
	'ACKNOWLEDGE_HOST_PROBLEM',
	$ohost->host_name,
	0,
	1,
	0,
	$message->Getfrom(),
	join(' ', @{$params}));
    }
    else {
	$ret = RunNagiosCmd(
	$message, 1, 
	'ACKNOWLEDGE_SVC_PROBLEM',
	$ohost->host_name,
	$oservice->service_description,
	0,
	1,
	0,
	$message->GetFrom(),
	join(' ', @{$params}));
    }

    $conn->Send($message->Reply(
	body => "Your acknowledgement of $hs has been queued.",
    )) if($ret);
}

sub ScheduleDT($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $start = shift(@{$params});
    my $end = shift(@{$params});
    my $duration = shift(@{$params});

    my $hs = shift(@{$params});
    my($ohost, $oservice) = FindHostService($message, 1, $hs);

    return unless(defined($ohost));

    my $ret = 0;

    if(!defined($oservice)) {
	$ret = RunNagiosCmd(
	$message, 1, 
	'SCHEDULE_HOST_SVC_DOWNTIME',
	$ohost->host_name,
	$oservice->service_description,
	$start,
	$end,
	0,
	0,
	$duration,
	$message->Getfrom(),
	join(' ', @{$params}));
    }
    else {
	$ret = RunNagiosCmd(
	$message, 1, 
	'SCHEDULE_SVC_DOWNTIME',
	$ohost->host_name,
	$oservice->service_description,
	$start,
	$end,
	0,
	0,
	$duration,
	$message->GetFrom(),
	join(' ', @{$params}));
    }

    $conn->Send($message->Reply(
	body => "The downtime of $hs has been queued.",
    )) if($ret);
}

sub SendHelp($@) {
    my $message = shift;
    my $params = shift;
    my $roles = shift;

    my $help;
    foreach my $cmd (sort keys %najabo_cmds) {
	next unless(scalar grep {$_ eq ${$najabo_cmds{$cmd}}{'role'}} @{$roles});

	$help .= "\n".${$najabo_cmds{$cmd}}{'descr'}.":\n\t$cmd";

	$help .= ' <'.join('> <', @{${$najabo_cmds{$cmd}}{'preq'}}).'>'
	    unless($#{${$najabo_cmds{$cmd}}{'preq'}} == -1);

	$help .= ' ['.join('] [', @{${$najabo_cmds{$cmd}}{'popt'}}).']'
	    unless($#{${$najabo_cmds{$cmd}}{'popt'}} == -1);

	$help .= "\n";
    }

    if($help) {
	$conn->Send($message->Reply(
	    body => "Command list:\n$help",
	));
    }
    else {
	$conn->Send($message->Reply(
	    body => "You don't have the required permission!",
	    errorcode => 403,
	    error => 'Forbidden',
	    type => 'error',
	));
    }
}

# we've got a message
sub InMessage {
    my $sid = shift;
    my $message = shift;

    if($message->GetType() eq 'error') {
	$logger->info(
	    'Got error '.$message->GetErrorCode().' from '.
	    $message->GetFrom().': '.$message->GetError());

	return;
    }

    my $reply = $message->Reply();
    my ($cmd, @params) = split(/\s+/, $message->GetBody());

    my @roles = qw(any);

    foreach my $role (keys %najabo_acls) {
	push(@roles, $role) if($message->GetFrom() =~ /$najabo_acls{$role}/);
    }

    my $user = 'JID: '.$message->GetFrom().', roles: '.join(', ', @roles);

    if(exists($najabo_cmds{$cmd})) {
	if (scalar grep {$_ eq ${$najabo_cmds{$cmd}}{'role'}} @roles) {
	    if(exists(${$najabo_cmds{$cmd}}{'run'})) {
		my $body = '';
		$body = `${$najabo_cmds{$cmd}}{'run'}`
		    if (-x ${$najabo_cmds{$cmd}}{'run'});
		chomp($body);

		if($body ne '') {
		    $logger->info("command ($user): $cmd");

		    $conn->Send($message->Reply(body=> "\n$body\n"));
		}
		else {
		    $logger->notice("command binary failed ($user): $cmd");
	            $conn->Send($message->Reply(body=> "command binary failed: $cmd"));
		}
	    }
	    elsif(exists(${$najabo_cmds{$cmd}}{'sub'})) {
		&{${$najabo_cmds{$cmd}}{'sub'}}($message, \@params, \@roles);
	    }
	    else {
		$logger->notice("command not implemented ($user): $cmd");
	        $conn->Send($message->Reply(body=> "Command not implemented: $cmd"));
	    }
	}
	else {
	    $logger->notice("command denied ($user): $cmd");
	    $conn->Send($message->Reply(body=> "You don't have the required permission for the '$cmd' command!"));
	}
    }
    else {
        if ($cmd eq '') {
            # ignore, this is an empty command (solves a problem anoying reactions, when youre typing an advertise this event)
        }
	elsif (exists($najabo_cmds{'help'}) && scalar grep {$_ eq ${$najabo_cmds{'help'}}{'role'}} @roles) {
	    $logger->info("command unknown ($user): $cmd");
	    $conn->Send($message->Reply(body=> "Unknown command '$cmd' - try 'help' to get command list!"));
	}
	else {
	    $conn->Send($message->Reply(body=> "Access deiend!"));
	}
    }
}

# somebody query's an IQ
sub InIQ {
    my $sid = shift;
    my $iq = shift;

    my $from = $iq->GetFrom();
    my $to = $iq->GetTo();
    my $id = $iq->GetID();
    my $type = $iq->GetType();
    my $query = $iq->GetQuery();

    if($type eq 'get') {
        my $xmlns = $query->GetXMLNS();

        if ($xmlns eq 'jabber:iq:version') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');

            my $ver = XML_IQ_VERSION;
            my $i;
            $ver =~ s/%NAJVER%/${\(NAJABOD_VERSION)}/;
            if(defined($i = $log->info) && defined($i->version)) {
                $ver =~ s/%NAGVER%/${$i}{version} /;
            }
            else {
                $ver =~ s/%NAGVER%//;
            }

            $iq->InsertRawXML($ver);
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'jabber:iq:last') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');

            my $seconds = '';
            my $i;
            if(defined($i = $log->info) && defined($i->created)) {
                $seconds = "seconds='".(time() - $i->created)."'";
            }

            $iq->InsertRawXML("<query xmlns='jabber:iq:last' $seconds/>");
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'urn:xmpp:time') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');

            my $tzo = strftime('%z', localtime);
            $tzo =~ s/(.+)(..)/$1:$2/;
            my $utc = strftime('%FT%TZ', gmtime);
            $iq->InsertRawXML(
"<time xmlns='urn:xmpp:time'>
    <tzo>$tzo</tzo>
    <utc>$utc</utc>
</time>"
            );
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'vcard-temp') {
            SendVCard(
                id => $id,
                type => 'result',
                to => $from,
                from => $to,
            );
        }
        elsif ($xmlns eq 'http://jabber.org/protocol/disco#info') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');
            $iq->InsertRawXML(XML_IQ_DISCO);
            $conn->Send($iq);
        }
        elsif ($xmlns eq 'urn:xmpp:ping') {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'result');
            $conn->Send($iq);
        }
        else {
            my $iq = new Net::XMPP::IQ();
            $iq->SetIQ(to => $from, from => $to, id => $id, type => 'error');
            $iq->InsertRawXML(XML_IQ_NOTIMPL);
            $conn->Send($iq);

            $logger->notice("Unhandled IQ: $xmlns");
        }
    }
}
